// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: tenant/account.proto

package tenant

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	core "sailing.cn/protobuf/core"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 登录状态
type LoginState int32

const (
	LoginState_Succeeded          LoginState = 0 //成功
	LoginState_Failed             LoginState = 1 //失败
	LoginState_TwoFactor          LoginState = 2 //需要两步认证
	LoginState_MustUpdatePassword LoginState = 3 //需要修改密码
)

// Enum value maps for LoginState.
var (
	LoginState_name = map[int32]string{
		0: "Succeeded",
		1: "Failed",
		2: "TwoFactor",
		3: "MustUpdatePassword",
	}
	LoginState_value = map[string]int32{
		"Succeeded":          0,
		"Failed":             1,
		"TwoFactor":          2,
		"MustUpdatePassword": 3,
	}
)

func (x LoginState) Enum() *LoginState {
	p := new(LoginState)
	*p = x
	return p
}

func (x LoginState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginState) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_account_proto_enumTypes[0].Descriptor()
}

func (LoginState) Type() protoreflect.EnumType {
	return &file_tenant_account_proto_enumTypes[0]
}

func (x LoginState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginState.Descriptor instead.
func (LoginState) EnumDescriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{0}
}

// 账户查询参数
type AccountQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                 //账户标识
	TenantId          string                  `protobuf:"bytes,2,opt,name=TenantId,proto3" json:"TenantId,omitempty"`                     //租户标识
	Name              string                  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                             //账户名称
	PasswordHash      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`             //密码散列
	Password          string                  `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`                     //登录密码
	NickName          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=NickName,proto3" json:"NickName,omitempty"`                     //姓名
	Enabled           bool                    `protobuf:"varint,7,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                      //启用状态
	Phone             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=Phone,proto3" json:"Phone,omitempty"`                           //手机号
	PhoneConfirmed    bool                    `protobuf:"varint,9,opt,name=PhoneConfirmed,proto3" json:"PhoneConfirmed,omitempty"`        //手机已确认
	Email             *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=Email,proto3" json:"Email,omitempty"`                          //邮箱
	EmailConfirmed    bool                    `protobuf:"varint,11,opt,name=EmailConfirmed,proto3" json:"EmailConfirmed,omitempty"`       //邮箱已确认
	Sex               *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=Sex,proto3" json:"Sex,omitempty"`                              //性别
	Birthday          *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=Birthday,proto3" json:"Birthday,omitempty"`                    //生日
	Description       *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=Description,proto3" json:"Description,omitempty"`              //简介
	LockoutEnd        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=LockoutEnd,proto3" json:"LockoutEnd,omitempty"`                //锁定截止
	LockoutEnabled    bool                    `protobuf:"varint,16,opt,name=LockoutEnabled,proto3" json:"LockoutEnabled,omitempty"`       //锁定状态
	AccessFailedCount int32                   `protobuf:"varint,17,opt,name=AccessFailedCount,proto3" json:"AccessFailedCount,omitempty"` //访问错误次数
	CreationTime      int64                   `protobuf:"varint,18,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`           //创建时间
	IsDeleted         bool                    `protobuf:"varint,20,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`                 //逻辑删除
}

func (x *AccountQuery) Reset() {
	*x = AccountQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountQuery) ProtoMessage() {}

func (x *AccountQuery) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountQuery.ProtoReflect.Descriptor instead.
func (*AccountQuery) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{0}
}

func (x *AccountQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountQuery) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AccountQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountQuery) GetPasswordHash() *wrapperspb.StringValue {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *AccountQuery) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountQuery) GetNickName() *wrapperspb.StringValue {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *AccountQuery) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AccountQuery) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *AccountQuery) GetPhoneConfirmed() bool {
	if x != nil {
		return x.PhoneConfirmed
	}
	return false
}

func (x *AccountQuery) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AccountQuery) GetEmailConfirmed() bool {
	if x != nil {
		return x.EmailConfirmed
	}
	return false
}

func (x *AccountQuery) GetSex() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *AccountQuery) GetBirthday() *wrapperspb.StringValue {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *AccountQuery) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccountQuery) GetLockoutEnd() *wrapperspb.StringValue {
	if x != nil {
		return x.LockoutEnd
	}
	return nil
}

func (x *AccountQuery) GetLockoutEnabled() bool {
	if x != nil {
		return x.LockoutEnabled
	}
	return false
}

func (x *AccountQuery) GetAccessFailedCount() int32 {
	if x != nil {
		return x.AccessFailedCount
	}
	return 0
}

func (x *AccountQuery) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *AccountQuery) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

// 账户分页查询参数
type AccountPageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page              *wrapperspb.Int32Value  `protobuf:"bytes,90,opt,name=Page,proto3" json:"Page,omitempty"`                            //页面
	PageSize          *wrapperspb.Int32Value  `protobuf:"bytes,91,opt,name=PageSize,proto3" json:"PageSize,omitempty"`                    //分页大小
	Order             *wrapperspb.StringValue `protobuf:"bytes,92,opt,name=Order,proto3" json:"Order,omitempty"`                          //排序
	Id                string                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                 //账户标识
	TenantId          string                  `protobuf:"bytes,2,opt,name=TenantId,proto3" json:"TenantId,omitempty"`                     //租户标识
	Name              string                  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                             //账户名称
	PasswordHash      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`             //密码散列
	Password          string                  `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`                     //登录密码
	NickName          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=NickName,proto3" json:"NickName,omitempty"`                     //姓名
	Enabled           bool                    `protobuf:"varint,7,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                      //启用状态
	Phone             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=Phone,proto3" json:"Phone,omitempty"`                           //手机号
	PhoneConfirmed    bool                    `protobuf:"varint,9,opt,name=PhoneConfirmed,proto3" json:"PhoneConfirmed,omitempty"`        //手机已确认
	Email             *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=Email,proto3" json:"Email,omitempty"`                          //邮箱
	EmailConfirmed    bool                    `protobuf:"varint,11,opt,name=EmailConfirmed,proto3" json:"EmailConfirmed,omitempty"`       //邮箱已确认
	Sex               *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=Sex,proto3" json:"Sex,omitempty"`                              //性别
	Birthday          *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=Birthday,proto3" json:"Birthday,omitempty"`                    //生日
	Description       *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=Description,proto3" json:"Description,omitempty"`              //简介
	LockoutEnd        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=LockoutEnd,proto3" json:"LockoutEnd,omitempty"`                //锁定截止
	LockoutEnabled    bool                    `protobuf:"varint,16,opt,name=LockoutEnabled,proto3" json:"LockoutEnabled,omitempty"`       //锁定状态
	AccessFailedCount int32                   `protobuf:"varint,17,opt,name=AccessFailedCount,proto3" json:"AccessFailedCount,omitempty"` //访问错误次数
	CreationTime      int64                   `protobuf:"varint,18,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`           //创建时间
	IsDeleted         bool                    `protobuf:"varint,20,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`                 //逻辑删除
}

func (x *AccountPageQuery) Reset() {
	*x = AccountPageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPageQuery) ProtoMessage() {}

func (x *AccountPageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPageQuery.ProtoReflect.Descriptor instead.
func (*AccountPageQuery) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{1}
}

func (x *AccountPageQuery) GetPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AccountPageQuery) GetPageSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *AccountPageQuery) GetOrder() *wrapperspb.StringValue {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *AccountPageQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountPageQuery) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AccountPageQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountPageQuery) GetPasswordHash() *wrapperspb.StringValue {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *AccountPageQuery) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountPageQuery) GetNickName() *wrapperspb.StringValue {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *AccountPageQuery) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AccountPageQuery) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *AccountPageQuery) GetPhoneConfirmed() bool {
	if x != nil {
		return x.PhoneConfirmed
	}
	return false
}

func (x *AccountPageQuery) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AccountPageQuery) GetEmailConfirmed() bool {
	if x != nil {
		return x.EmailConfirmed
	}
	return false
}

func (x *AccountPageQuery) GetSex() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *AccountPageQuery) GetBirthday() *wrapperspb.StringValue {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *AccountPageQuery) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccountPageQuery) GetLockoutEnd() *wrapperspb.StringValue {
	if x != nil {
		return x.LockoutEnd
	}
	return nil
}

func (x *AccountPageQuery) GetLockoutEnabled() bool {
	if x != nil {
		return x.LockoutEnabled
	}
	return false
}

func (x *AccountPageQuery) GetAccessFailedCount() int32 {
	if x != nil {
		return x.AccessFailedCount
	}
	return 0
}

func (x *AccountPageQuery) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *AccountPageQuery) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

// 登录请求
type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`   //账户名
	Email    string `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`       //电子邮箱
	Phone    string `protobuf:"bytes,3,opt,name=Phone,proto3" json:"Phone,omitempty"`       //手机号码
	Password string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"` //密码
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 账户创建参数
type AccountCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode string `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"` //租户编码
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`             //账户名
	Password   string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`     //密码
	Email      string `protobuf:"bytes,4,opt,name=Email,proto3" json:"Email,omitempty"`           //电子邮箱
	Phone      string `protobuf:"bytes,5,opt,name=Phone,proto3" json:"Phone,omitempty"`           //手机号码
}

func (x *AccountCreateRequest) Reset() {
	*x = AccountCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCreateRequest) ProtoMessage() {}

func (x *AccountCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCreateRequest.ProtoReflect.Descriptor instead.
func (*AccountCreateRequest) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{3}
}

func (x *AccountCreateRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *AccountCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountCreateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountCreateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AccountCreateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// 账户修改参数
type AccountUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                           //账户标识
	TenantCode     string                  `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`           //租户标识
	Name           string                  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                       //账户名称
	PasswordHash   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`       //密码散列
	Password       string                  `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`               //登录密码
	NickName       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=NickName,proto3" json:"NickName,omitempty"`               //姓名
	Enabled        bool                    `protobuf:"varint,7,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                //启用状态
	Phone          *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=Phone,proto3" json:"Phone,omitempty"`                     //手机号
	PhoneConfirmed bool                    `protobuf:"varint,9,opt,name=PhoneConfirmed,proto3" json:"PhoneConfirmed,omitempty"`  //手机已确认
	Email          *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=Email,proto3" json:"Email,omitempty"`                    //邮箱
	EmailConfirmed bool                    `protobuf:"varint,11,opt,name=EmailConfirmed,proto3" json:"EmailConfirmed,omitempty"` //邮箱已确认
	Sex            *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=Sex,proto3" json:"Sex,omitempty"`                        //性别
	Birthday       *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=Birthday,proto3" json:"Birthday,omitempty"`              //生日
	Revision       string                  `protobuf:"bytes,99,opt,name=Revision,proto3" json:"Revision,omitempty"`              // 数据版本
}

func (x *AccountUpdateRequest) Reset() {
	*x = AccountUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUpdateRequest) ProtoMessage() {}

func (x *AccountUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUpdateRequest.ProtoReflect.Descriptor instead.
func (*AccountUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{4}
}

func (x *AccountUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountUpdateRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *AccountUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountUpdateRequest) GetPasswordHash() *wrapperspb.StringValue {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *AccountUpdateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountUpdateRequest) GetNickName() *wrapperspb.StringValue {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *AccountUpdateRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AccountUpdateRequest) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *AccountUpdateRequest) GetPhoneConfirmed() bool {
	if x != nil {
		return x.PhoneConfirmed
	}
	return false
}

func (x *AccountUpdateRequest) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AccountUpdateRequest) GetEmailConfirmed() bool {
	if x != nil {
		return x.EmailConfirmed
	}
	return false
}

func (x *AccountUpdateRequest) GetSex() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *AccountUpdateRequest) GetBirthday() *wrapperspb.StringValue {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *AccountUpdateRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// 账户返回值
type AccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                 //账户标识
	TenantId          string                  `protobuf:"bytes,2,opt,name=TenantId,proto3" json:"TenantId,omitempty"`                     //租户标识
	Name              string                  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                             //账户名称
	PasswordHash      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`             //密码散列
	Password          string                  `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`                     //登录密码
	NickName          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=NickName,proto3" json:"NickName,omitempty"`                     //姓名
	Enabled           bool                    `protobuf:"varint,7,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                      //启用状态
	Phone             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=Phone,proto3" json:"Phone,omitempty"`                           //手机号
	PhoneConfirmed    bool                    `protobuf:"varint,9,opt,name=PhoneConfirmed,proto3" json:"PhoneConfirmed,omitempty"`        //手机已确认
	Email             *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=Email,proto3" json:"Email,omitempty"`                          //邮箱
	EmailConfirmed    bool                    `protobuf:"varint,11,opt,name=EmailConfirmed,proto3" json:"EmailConfirmed,omitempty"`       //邮箱已确认
	Sex               *wrapperspb.Int32Value  `protobuf:"bytes,12,opt,name=Sex,proto3" json:"Sex,omitempty"`                              //性别
	Birthday          *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=Birthday,proto3" json:"Birthday,omitempty"`                    //生日
	Description       *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=Description,proto3" json:"Description,omitempty"`              //简介
	LockoutEnd        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=LockoutEnd,proto3" json:"LockoutEnd,omitempty"`                //锁定截止
	LockoutEnabled    bool                    `protobuf:"varint,16,opt,name=LockoutEnabled,proto3" json:"LockoutEnabled,omitempty"`       //锁定状态
	AccessFailedCount int32                   `protobuf:"varint,17,opt,name=AccessFailedCount,proto3" json:"AccessFailedCount,omitempty"` //访问错误次数
	CreationTime      int64                   `protobuf:"varint,18,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`           //创建时间
	IsDeleted         bool                    `protobuf:"varint,20,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`                 //逻辑删除
	Revision          string                  `protobuf:"bytes,99,opt,name=Revision,proto3" json:"Revision,omitempty"`                    // 数据版本
}

func (x *AccountResponse) Reset() {
	*x = AccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountResponse) ProtoMessage() {}

func (x *AccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountResponse.ProtoReflect.Descriptor instead.
func (*AccountResponse) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{5}
}

func (x *AccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountResponse) GetPasswordHash() *wrapperspb.StringValue {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *AccountResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountResponse) GetNickName() *wrapperspb.StringValue {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *AccountResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AccountResponse) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *AccountResponse) GetPhoneConfirmed() bool {
	if x != nil {
		return x.PhoneConfirmed
	}
	return false
}

func (x *AccountResponse) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AccountResponse) GetEmailConfirmed() bool {
	if x != nil {
		return x.EmailConfirmed
	}
	return false
}

func (x *AccountResponse) GetSex() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *AccountResponse) GetBirthday() *wrapperspb.StringValue {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *AccountResponse) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccountResponse) GetLockoutEnd() *wrapperspb.StringValue {
	if x != nil {
		return x.LockoutEnd
	}
	return nil
}

func (x *AccountResponse) GetLockoutEnabled() bool {
	if x != nil {
		return x.LockoutEnabled
	}
	return false
}

func (x *AccountResponse) GetAccessFailedCount() int32 {
	if x != nil {
		return x.AccessFailedCount
	}
	return 0
}

func (x *AccountResponse) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *AccountResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *AccountResponse) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// 账户分页返回值
type AccountPageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *core.Page         `protobuf:"bytes,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Data []*AccountResponse `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AccountPageListResponse) Reset() {
	*x = AccountPageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPageListResponse) ProtoMessage() {}

func (x *AccountPageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPageListResponse.ProtoReflect.Descriptor instead.
func (*AccountPageListResponse) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{6}
}

func (x *AccountPageListResponse) GetPage() *core.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AccountPageListResponse) GetData() []*AccountResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// 账户无分页返回值
type AccountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AccountResponse `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AccountListResponse) Reset() {
	*x = AccountListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountListResponse) ProtoMessage() {}

func (x *AccountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountListResponse.ProtoReflect.Descriptor instead.
func (*AccountListResponse) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{7}
}

func (x *AccountListResponse) GetData() []*AccountResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// 登录响应
type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string     `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`                   //账户名
	TenantCode string     `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`             //租户Code标识
	State      LoginState `protobuf:"varint,3,opt,name=State,proto3,enum=core.LoginState" json:"State,omitempty"` //登录状态
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_account_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_account_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_tenant_account_proto_rawDescGZIP(), []int{8}
}

func (x *LoginResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginResponse) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *LoginResponse) GetState() LoginState {
	if x != nil {
		return x.State
	}
	return LoginState_Succeeded
}

var File_tenant_account_proto protoreflect.FileDescriptor

var file_tenant_account_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb7, 0x06, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38,
	0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x53, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xd9, 0x07, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12,
	0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xc9, 0x04, 0x0a,
	0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x53,
	0x65, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x06, 0x0a, 0x0f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12,
	0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x64, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x0d, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x4e, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x75, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x03, 0x32, 0xaf, 0x04, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x15,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3b, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x36,
	0x5a, 0x1a, 0x73, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0xaa, 0x02, 0x17, 0x53,
	0x61, 0x69, 0x4c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tenant_account_proto_rawDescOnce sync.Once
	file_tenant_account_proto_rawDescData = file_tenant_account_proto_rawDesc
)

func file_tenant_account_proto_rawDescGZIP() []byte {
	file_tenant_account_proto_rawDescOnce.Do(func() {
		file_tenant_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_tenant_account_proto_rawDescData)
	})
	return file_tenant_account_proto_rawDescData
}

var file_tenant_account_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tenant_account_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tenant_account_proto_goTypes = []interface{}{
	(LoginState)(0),                 // 0: core.LoginState
	(*AccountQuery)(nil),            // 1: core.AccountQuery
	(*AccountPageQuery)(nil),        // 2: core.AccountPageQuery
	(*LoginRequest)(nil),            // 3: core.LoginRequest
	(*AccountCreateRequest)(nil),    // 4: core.AccountCreateRequest
	(*AccountUpdateRequest)(nil),    // 5: core.AccountUpdateRequest
	(*AccountResponse)(nil),         // 6: core.AccountResponse
	(*AccountPageListResponse)(nil), // 7: core.AccountPageListResponse
	(*AccountListResponse)(nil),     // 8: core.AccountListResponse
	(*LoginResponse)(nil),           // 9: core.LoginResponse
	(*wrapperspb.StringValue)(nil),  // 10: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),   // 11: google.protobuf.Int32Value
	(*core.Page)(nil),               // 12: core.Page
	(*core.IdQuery)(nil),            // 13: core.IdQuery
	(*core.IdListRequest)(nil),      // 14: core.IdListRequest
	(*core.IdRequest)(nil),          // 15: core.IdRequest
	(*core.BoolResult)(nil),         // 16: core.BoolResult
}
var file_tenant_account_proto_depIdxs = []int32{
	10, // 0: core.AccountQuery.PasswordHash:type_name -> google.protobuf.StringValue
	10, // 1: core.AccountQuery.NickName:type_name -> google.protobuf.StringValue
	10, // 2: core.AccountQuery.Phone:type_name -> google.protobuf.StringValue
	10, // 3: core.AccountQuery.Email:type_name -> google.protobuf.StringValue
	11, // 4: core.AccountQuery.Sex:type_name -> google.protobuf.Int32Value
	10, // 5: core.AccountQuery.Birthday:type_name -> google.protobuf.StringValue
	10, // 6: core.AccountQuery.Description:type_name -> google.protobuf.StringValue
	10, // 7: core.AccountQuery.LockoutEnd:type_name -> google.protobuf.StringValue
	11, // 8: core.AccountPageQuery.Page:type_name -> google.protobuf.Int32Value
	11, // 9: core.AccountPageQuery.PageSize:type_name -> google.protobuf.Int32Value
	10, // 10: core.AccountPageQuery.Order:type_name -> google.protobuf.StringValue
	10, // 11: core.AccountPageQuery.PasswordHash:type_name -> google.protobuf.StringValue
	10, // 12: core.AccountPageQuery.NickName:type_name -> google.protobuf.StringValue
	10, // 13: core.AccountPageQuery.Phone:type_name -> google.protobuf.StringValue
	10, // 14: core.AccountPageQuery.Email:type_name -> google.protobuf.StringValue
	11, // 15: core.AccountPageQuery.Sex:type_name -> google.protobuf.Int32Value
	10, // 16: core.AccountPageQuery.Birthday:type_name -> google.protobuf.StringValue
	10, // 17: core.AccountPageQuery.Description:type_name -> google.protobuf.StringValue
	10, // 18: core.AccountPageQuery.LockoutEnd:type_name -> google.protobuf.StringValue
	10, // 19: core.AccountUpdateRequest.PasswordHash:type_name -> google.protobuf.StringValue
	10, // 20: core.AccountUpdateRequest.NickName:type_name -> google.protobuf.StringValue
	10, // 21: core.AccountUpdateRequest.Phone:type_name -> google.protobuf.StringValue
	10, // 22: core.AccountUpdateRequest.Email:type_name -> google.protobuf.StringValue
	11, // 23: core.AccountUpdateRequest.Sex:type_name -> google.protobuf.Int32Value
	10, // 24: core.AccountUpdateRequest.Birthday:type_name -> google.protobuf.StringValue
	10, // 25: core.AccountResponse.PasswordHash:type_name -> google.protobuf.StringValue
	10, // 26: core.AccountResponse.NickName:type_name -> google.protobuf.StringValue
	10, // 27: core.AccountResponse.Phone:type_name -> google.protobuf.StringValue
	10, // 28: core.AccountResponse.Email:type_name -> google.protobuf.StringValue
	11, // 29: core.AccountResponse.Sex:type_name -> google.protobuf.Int32Value
	10, // 30: core.AccountResponse.Birthday:type_name -> google.protobuf.StringValue
	10, // 31: core.AccountResponse.Description:type_name -> google.protobuf.StringValue
	10, // 32: core.AccountResponse.LockoutEnd:type_name -> google.protobuf.StringValue
	12, // 33: core.AccountPageListResponse.Page:type_name -> core.Page
	6,  // 34: core.AccountPageListResponse.Data:type_name -> core.AccountResponse
	6,  // 35: core.AccountListResponse.Data:type_name -> core.AccountResponse
	0,  // 36: core.LoginResponse.State:type_name -> core.LoginState
	3,  // 37: core.AccountService.Login:input_type -> core.LoginRequest
	13, // 38: core.AccountService.GetAccount:input_type -> core.IdQuery
	14, // 39: core.AccountService.GetAccountByIdList:input_type -> core.IdListRequest
	2,  // 40: core.AccountService.PageListAccount:input_type -> core.AccountPageQuery
	1,  // 41: core.AccountService.ListAccount:input_type -> core.AccountQuery
	4,  // 42: core.AccountService.CreateAccount:input_type -> core.AccountCreateRequest
	5,  // 43: core.AccountService.UpdateAccount:input_type -> core.AccountUpdateRequest
	15, // 44: core.AccountService.DeleteAccount:input_type -> core.IdRequest
	14, // 45: core.AccountService.BatchDeleteAccount:input_type -> core.IdListRequest
	9,  // 46: core.AccountService.Login:output_type -> core.LoginResponse
	6,  // 47: core.AccountService.GetAccount:output_type -> core.AccountResponse
	16, // 48: core.AccountService.GetAccountByIdList:output_type -> core.BoolResult
	7,  // 49: core.AccountService.PageListAccount:output_type -> core.AccountPageListResponse
	8,  // 50: core.AccountService.ListAccount:output_type -> core.AccountListResponse
	6,  // 51: core.AccountService.CreateAccount:output_type -> core.AccountResponse
	16, // 52: core.AccountService.UpdateAccount:output_type -> core.BoolResult
	16, // 53: core.AccountService.DeleteAccount:output_type -> core.BoolResult
	16, // 54: core.AccountService.BatchDeleteAccount:output_type -> core.BoolResult
	46, // [46:55] is the sub-list for method output_type
	37, // [37:46] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_tenant_account_proto_init() }
func file_tenant_account_proto_init() {
	if File_tenant_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tenant_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_account_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tenant_account_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tenant_account_proto_goTypes,
		DependencyIndexes: file_tenant_account_proto_depIdxs,
		EnumInfos:         file_tenant_account_proto_enumTypes,
		MessageInfos:      file_tenant_account_proto_msgTypes,
	}.Build()
	File_tenant_account_proto = out.File
	file_tenant_account_proto_rawDesc = nil
	file_tenant_account_proto_goTypes = nil
	file_tenant_account_proto_depIdxs = nil
}
